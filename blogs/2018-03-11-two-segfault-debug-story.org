#+TITLE: 记两个 SegFault 调试
#+WIKI: proglang/c proglang/c++ debug
#+DATE: 2018-03-11

我最近接连两次调试内存错误，一次6小时，一次2小时，起因都是自己的疏忽和对语言的不
熟悉，又因为调试思路不够系统，花费很多时间，这里记录一下。

* CRTP 在 ~void*~ 中保存子类的 ~this~

** 程序错误

- 起因是我在 C++ 里调用 libuv，需要把 ~this~ 保存在 ~(void *)uv_handle_t.data~
  里。我写了个 CRTP 类 ~class Handle<T>~ ，帮我做这事
- 在 ~CRTP<T>~ 里，我应该把 ~this~ 转换为 ~T*~ ；然而我却转换成了 ~CRTP<T>~
- 之前都是单继承，又没有在子类里引入虚指针，因此类型转换后得到的地址和原本的
  ~this~ 相同
- 而新的数据结构我用了一次 *多继承*，并且没有第一个继承 CRTP，而是继承了一个 *有
  大小* 的类
- 因此上面的指针类型转换得到的地址，比原本的 ~this~ 往后移了
- 把它从 ~uv_handle_t.data~ 拿下来时，我又当作 ~T*~ 直接用了
- 因此就出现了奇怪的内存错误！数据成员拿下来完全不对

** 调试过程

- 引入这个 bug 时，我还做了另一个修改，就是引入了 ~std::enable_shared_from_this~
  这个我不熟悉的事情，导致我一开始下意识认为是这个引发的问题，花了很多时间调研，
  并且一度以为它不支持多继承（哪怕整个继承树里它仅仅出现一次）
- 我在出问题的函数里和外面打印了那个完全错误的数据成员，发现它完全不对，并且经常变得不一样
  - 现在想来，这是多么明显的 *指针错误* 的征兆！
  - 然而这个数据成员是经过很多层指针一个一个对象跳着指过去的，我完全没想到第一个
    指针就错了；尽管这是 *最好尝试* 的，也是唯一一处使用了和 ~void*~ 之间做类型
    转换操作的 ~this~ 指针
  - 指针那么多，我怎么会想到 ~this~ 错了呢？然而其它地方都是 C++ 的智能指针，这
    里嫌疑确实很大
- 另外还有个问题：这个问题是在 libuv 的文件回调函数里出现的
  - 为了排除 libuv 导致问题的可能性
    - 尝试1，把回调函数清空：结果回调函数外面还是使用了这个错误的 ~this~ ，
      是在 ~std::enable_shared_from_this~ 里用的，加深了我对它的误会
    - 尝试2，不在 libuv 回调函数里调用，而是放在外面：还是有这个问题
      - 至少说明不需要 libuv 也会出问题
      - 同时这里没有用到 ~std::enable_shared_from_this~ ，理论上应该让思路清晰很
        多
- 在这期间，我跑了很多很多遍程序不断尝试 ~std::enable_shared_from_this~ 是否有问题
  - 然后才发现出问题的地方从来都是这个多继承的类
  - 但是这时候我还在想 ~std::enable_shared_from_this~ ，就是它让我用了多继承
  - 我把第一个继承的类清空，问题突然不见了；加了一个成员，又有问题了。这时候的我
    倾向认为 ~std::enable_shared_from_this~ 不支持多继承；但是大家都说支持，并且
    整个继承树它只出现了一次，按说没问题
  - 我忘记发生了什么，（似乎是在把其它类的基类也变成 CRTP 时），我注意到我所有的
    CRTP 里都把 ~this~ 转换成了 CRTP 的类型（但是 CRTP 里 ~this~ 原本就是这个类
    型），猛然反应过来

** 总结

- C++里 ~void*~ 指针真的非常非常容易用错
- C++的“无代价抽象”思想（我觉得对于一个系统语言来说几乎是必须的），在类型系统
  上体现得非常明显：每个类型对应不同的内存布局，类型的继承在底层就是将不同类的布
  局尽量紧凑地拼接在一起。因此一旦搞错了类型，就搞错了地址，就会出现神奇的内存错
  误
- 我为什么会使用继承？甚至为什么要用多继承？
  - 虽然获得了宝贵的经验
  - 但是反思一下，这些继承都可以用组合来代替：我不是要修改接口，而是要使用功能
- 我还是很困惑，面对这个问题如何系统性地排查？以下是一个思路：
  - 在发现是 libuv 回调函数里出问题后，直接清空回调函数，或者使用一个简单的成员
    函数访问数据成员，替代原本的回调函数
  - 发现仍然有问题时，在申请回调时直接调用回调函数，看看是否有问题
  - 追逐数据成员的地址，会发现几行之内数据成员的地址变了
  - 如果我能想起来这里有个 ~void*~ 的转换，我就能反应过来
  - 否则也得必须想到 ~this~ 可能出问题了！这时候范围非常小，gdb一行一行跟就行了

* 向 ~void*~ 参数传入了 ~CURLM**~

** 程序错误

- 一调用 ~curl_multi_socket_action~ ，在还没进回调函数之前就在 ~multi->timetree~ 那里 segfault
  - 编译 curl 的时候没开 debug 符号，绕了很多弯路才想起来，等找到 timetree 这里已经花了很多时间
- 这里真的是，真的是想错了。手上拿着 ~CURLM* m~ ，却往
  ~curl_multi_socket_action~ 里传了 ~&m~
- 因为之前写 libuv 时，手上拿着的都是 ~uv_handle_t h~ ，大部分时间需要传入 ~&h~
  ，形成了肌肉记忆
- 这里我忍不住吐槽 curl，把 ~CURL~ 和 ~CURLM~ 对外都转成 ~void~ 是出于怎样的考虑？
  直接废掉了编译器的类型检查
- 我再忍不住表扬 libuv 一下，大部分接口都是用户管理内存，它负责使用内存；curl 就
  很喜欢自己管。也不能说谁好谁坏，但是一旦想用自己的内存管理方式，原生的 curl 就
  不太友好了

** 调试过程

- 由于对 curl 完全不熟悉，一开始以为是 API 调用不对，花一点时间用打印大法和调整
  程序顺序，发现 ~curl_multi_socket_action~ 无论如何都出错
- 过了一阵子才坚定信心，重新编译 curl ，开启调试符号
- 看到 valgrind 和 gdb 汇报崩溃时 ~multi->timetree一个叶子节点~ 的内存地址非常奇
  怪，又想着是不是 curl 哪里用错了，就想知道　~multi->timetree~ 的变化历程
  - 断电设得不是很好，libuv　偶尔来捣乱，花了很多时间才发现，只要一进
    ~curl_multi_socket_action~ ， ~multi~ 的地址就错了
- 又花了几分钟才反应过来是传参传错了，根本没想到这个可能性
- 整个过程十分菜鸡　　

** 总结

- ~void*~ 真的真的太容易藏错误了
- 一旦发现是 curl 内部问题，就要开启 curl 的调试符号
- 在用 gdb 追踪时，如果成员值非常奇怪，要检查所有者的地址是否也非常奇怪

* 经验教训

- 开启调试符号非常关键
- 出现内存错误后，一定用 gdb 检查变量地址
  - 要是能熟知变量一般会出现在内存哪些区域就好了，多一点直觉
- 如果成员值非常奇怪，要检查所有者的地址是否也非常奇怪
